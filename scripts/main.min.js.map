{"version":3,"sources":["cssrelpreload.js","loadCSS.js"],"names":["w","loadCSS","rp","relpreload","support","document","createElement","relList","supports","e","poly","links","getElementsByTagName","i","length","link","rel","getAttribute","href","run","setInterval","addEventListener","clearInterval","attachEvent","this","before","media","ready","cb","doc","body","setTimeout","loadCB","ss","removeEventListener","ref","refs","childNodes","sheets","styleSheets","parentNode","insertBefore","nextSibling","onloadcssdefined","resolvedHref","exports","global"],"mappings":";CACA,SAAAA,GAEA,GAAAA,EAAAC,QAAA,CAGA,GAAAC,GAAAD,QAAAE,aAsBA,IArBAD,EAAAE,QAAA,WACA,IACA,MAAAJ,GAAAK,SAAAC,cAAA,QAAAC,QAAAC,SAAA,WACA,MAAAC,GACA,OAAA,IAKAP,EAAAQ,KAAA,WAEA,IAAA,GADAC,GAAAX,EAAAK,SAAAO,qBAAA,QACAC,EAAA,EAAAA,EAAAF,EAAAG,OAAAD,IAAA,CACA,GAAAE,GAAAJ,EAAAE,EACA,aAAAE,EAAAC,KAAA,UAAAD,EAAAE,aAAA,QACAjB,EAAAC,QAAAc,EAAAG,KAAAH,GACAA,EAAAC,IAAA,SAMAd,EAAAE,UAAA,CACAF,EAAAQ,MACA,IAAAS,GAAAnB,EAAAoB,YAAAlB,EAAAQ,KAAA,IACAV,GAAAqB,kBACArB,EAAAqB,iBAAA,OAAA,WACAnB,EAAAQ,OACAV,EAAAsB,cAAAH,KAGAnB,EAAAuB,aACAvB,EAAAuB,YAAA,SAAA,WACAvB,EAAAsB,cAAAH,QAIAK;AC1CA,SAAAxB,GACA,YAEA,IAAAC,GAAA,SAAAiB,EAAAO,EAAAC,GAwBA,QAAAC,GAAAC,GACA,MAAAC,GAAAC,KACAF,QAEAG,YAAA,WACAJ,EAAAC,KAuBA,QAAAI,KACAC,EAAAZ,kBACAY,EAAAC,oBAAA,OAAAF,GAEAC,EAAAP,MAAAA,GAAA,MAlDA,GAEAS,GAFAN,EAAA7B,EAAAK,SACA4B,EAAAJ,EAAAvB,cAAA,OAEA,IAAAmB,EACAU,EAAAV,MAEA,CACA,GAAAW,IAAAP,EAAAC,MAAAD,EAAAjB,qBAAA,QAAA,IAAAyB,UACAF,GAAAC,EAAAA,EAAAtB,OAAA,GAGA,GAAAwB,GAAAT,EAAAU,WACAN,GAAAjB,IAAA,aACAiB,EAAAf,KAAAA,EAEAe,EAAAP,MAAA,SAcAC,EAAA,WACAQ,EAAAK,WAAAC,aAAAR,EAAAR,EAAAU,EAAAA,EAAAO,cAGA,IAAAC,GAAA,SAAAf,GAGA,IAFA,GAAAgB,GAAAX,EAAAf,KACAL,EAAAyB,EAAAxB,OACAD,KACA,GAAAyB,EAAAzB,GAAAK,OAAA0B,EACA,MAAAhB,IAGAG,YAAA,WACAY,EAAAf,KAiBA,OALAK,GAAAZ,kBACAY,EAAAZ,iBAAA,OAAAW,GAEAC,EAAAU,iBAAAA,EACAA,EAAAX,GACAC,EAGA,oBAAAY,SACAA,QAAA5C,QAAAA,EAGAD,EAAAC,QAAAA,GAEA,mBAAA6C,QAAAA,OAAAtB","file":"main.min.js","sourcesContent":["/*! CSS rel=preload polyfill. Depends on loadCSS function. [c]2016 @scottjehl, Filament Group, Inc. Licensed MIT  */\n(function( w ){\n  // rel=preload support test\n  if( !w.loadCSS ){\n    return;\n  }\n  var rp = loadCSS.relpreload = {};\n  rp.support = function(){\n    try {\n      return w.document.createElement( \"link\" ).relList.supports( \"preload\" );\n    } catch (e) {\n      return false;\n    }\n  };\n\n  // loop preload links and fetch using loadCSS\n  rp.poly = function(){\n    var links = w.document.getElementsByTagName( \"link\" );\n    for( var i = 0; i < links.length; i++ ){\n      var link = links[ i ];\n      if( link.rel === \"preload\" && link.getAttribute( \"as\" ) === \"style\" ){\n        w.loadCSS( link.href, link );\n        link.rel = null;\n      }\n    }\n  };\n\n  // if link[rel=preload] is not supported, we must fetch the CSS manually using loadCSS\n  if( !rp.support() ){\n    rp.poly();\n    var run = w.setInterval( rp.poly, 300 );\n    if( w.addEventListener ){\n      w.addEventListener( \"load\", function(){\n        rp.poly();\n        w.clearInterval( run );\n      } );\n    }\n    if( w.attachEvent ){\n      w.attachEvent( \"onload\", function(){\n        w.clearInterval( run );\n      } )\n    }\n  }\n}( this ));\n","/*! loadCSS: load a CSS file asynchronously. [c]2016 @scottjehl, Filament Group, Inc. Licensed MIT */\n(function(w){\n\t\"use strict\";\n\t/* exported loadCSS */\n\tvar loadCSS = function( href, before, media ){\n\t\t// Arguments explained:\n\t\t// `href` [REQUIRED] is the URL for your CSS file.\n\t\t// `before` [OPTIONAL] is the element the script should use as a reference for injecting our stylesheet <link> before\n\t\t\t// By default, loadCSS attempts to inject the link after the last stylesheet or script in the DOM. However, you might desire a more specific location in your document.\n\t\t// `media` [OPTIONAL] is the media type or query of the stylesheet. By default it will be 'all'\n\t\tvar doc = w.document;\n\t\tvar ss = doc.createElement( \"link\" );\n\t\tvar ref;\n\t\tif( before ){\n\t\t\tref = before;\n\t\t}\n\t\telse {\n\t\t\tvar refs = ( doc.body || doc.getElementsByTagName( \"head\" )[ 0 ] ).childNodes;\n\t\t\tref = refs[ refs.length - 1];\n\t\t}\n\n\t\tvar sheets = doc.styleSheets;\n\t\tss.rel = \"stylesheet\";\n\t\tss.href = href;\n\t\t// temporarily set media to something inapplicable to ensure it'll fetch without blocking render\n\t\tss.media = \"only x\";\n\n\t\t// wait until body is defined before injecting link. This ensures a non-blocking load in IE11.\n\t\tfunction ready( cb ){\n\t\t\tif( doc.body ){\n\t\t\t\treturn cb();\n\t\t\t}\n\t\t\tsetTimeout(function(){\n\t\t\t\tready( cb );\n\t\t\t});\n\t\t}\n\t\t// Inject link\n\t\t\t// Note: the ternary preserves the existing behavior of \"before\" argument, but we could choose to change the argument to \"after\" in a later release and standardize on ref.nextSibling for all refs\n\t\t\t// Note: `insertBefore` is used instead of `appendChild`, for safety re: http://www.paulirish.com/2011/surefire-dom-element-insertion/\n\t\tready( function(){\n\t\t\tref.parentNode.insertBefore( ss, ( before ? ref : ref.nextSibling ) );\n\t\t});\n\t\t// A method (exposed on return object for external use) that mimics onload by polling document.styleSheets until it includes the new sheet.\n\t\tvar onloadcssdefined = function( cb ){\n\t\t\tvar resolvedHref = ss.href;\n\t\t\tvar i = sheets.length;\n\t\t\twhile( i-- ){\n\t\t\t\tif( sheets[ i ].href === resolvedHref ){\n\t\t\t\t\treturn cb();\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetTimeout(function() {\n\t\t\t\tonloadcssdefined( cb );\n\t\t\t});\n\t\t};\n\n\t\tfunction loadCB(){\n\t\t\tif( ss.addEventListener ){\n\t\t\t\tss.removeEventListener( \"load\", loadCB );\n\t\t\t}\n\t\t\tss.media = media || \"all\";\n\t\t}\n\n\t\t// once loaded, set link's media back to `all` so that the stylesheet applies once it loads\n\t\tif( ss.addEventListener ){\n\t\t\tss.addEventListener( \"load\", loadCB);\n\t\t}\n\t\tss.onloadcssdefined = onloadcssdefined;\n\t\tonloadcssdefined( loadCB );\n\t\treturn ss;\n\t};\n\t// commonjs\n\tif( typeof exports !== \"undefined\" ){\n\t\texports.loadCSS = loadCSS;\n\t}\n\telse {\n\t\tw.loadCSS = loadCSS;\n\t}\n}( typeof global !== \"undefined\" ? global : this ));\n"]}